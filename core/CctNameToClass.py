"""Subclass of frmNameToClass, which is generated by wxFormBuilder."""

import ui


class N2CParam:
    def __init__(self):
        self.strClassName = u""
        self.strClassBase = u""
        self.strSharedPtr = u""
        self.bImpl = True
        self.bQObject = False


class Constructed:
    def __init__(self, strClassBase):
        self.strClassName = u""
        self.listParamVal = []
        self.listParam = []
        self.listVal = []

        self.convent(strClassBase)

    def convent(self, strClassBase):
        nStart = strClassBase.find(u"(")
        nEnd = strClassBase.rfind(u")")
        if nStart is not -1:
            self.strClassName = strClassBase[: nStart].strip()
            if nEnd is not -1:
                strParam = strClassBase[nStart + 1: nEnd]
                self.listParamVal = [str.strip() for str in strParam.split(",")]

                for str in self.listParamVal:
                    nIdx = str.find(u"=")
                    if nIdx != -1:
                        str = str[:nIdx].strip()
                    self.listParam.append(str)
                    self.listVal.append(str[str.find(u" "):].strip())
        else:
            self.strClassName = strClassBase

# Implementing frmNameToClass
class CCTNameToClass(ui.CctUi.frmNameToClass):
    def __init__(self, parent):
        ui.CctUi.frmNameToClass.__init__(self, parent)

    # Handlers for frmNameToClass events.
    def OnTextEdtClassName(self, event):
        self.update_dst()
        pass

    def OnTextEdtClassBase(self, event):
        self.update_dst()
        pass

    def OnCheckCbImpl(self, event):
        self.update_dst()
        pass

    def OnTextEdtSharedPtr(self, event):
        self.update_dst()
        pass

    def OnCheckCbQObject(self, event):
        self.update_dst()
        pass

    def update_dst(self):
        param = N2CParam()
        param.strClassName = self.edtClassName.GetValue()
        param.strClassBase = self.edtClassBase.GetValue()
        param.strSharedPtr = self.edtSharedPtr.GetValue()
        param.bImpl = self.cbImpl.GetValue()
        param.bQObject = self.cbQObject.GetValue()
        strH = self.convert_h(param)
        self.edtH.SetValue(strH)
        strCpp = self.convert_cpp(param)
        self.edtCpp.SetValue(strCpp)

    @classmethod
    def convert_h(cls, param):
        listDes = []
        strDefine = u"__%s_H__" % param.strClassName.upper()

        csParam = Constructed(param.strClassBase)

        listDes.append(u"#ifndef " + strDefine)
        listDes.append(u"#define " + strDefine)
        listDes.append(u"\n")

        if csParam.strClassName:
            listDes.append(u"class %s : public %s" % (param.strClassName, csParam.strClassName))
        else:
            listDes.append(u"class %s" % param.strClassName)

        listDes.append(u"{")

        if param.bQObject:
            listDes.append(u"Q_OBJECT")

        listDes.append(u"public:")

        if len(csParam.listParamVal) is not 0:
            listDes.append(u"%s(%s);" % (param.strClassName, u", ".join(csParam.listParamVal)))
        else:
            listDes.append(u"%s();" % (param.strClassName))

        listDes.append(u"~%s();" % (param.strClassName))

        if param.bImpl:
            listDes.append(u"")
            listDes.append(u"private:")
            listDes.append(u"class Impl;")
            listDes.append(u"%s<Impl> m_pImpl;" % param.strSharedPtr)

        listDes.append(u"};")

        listDes.append(u"\n")

        listDes.append(u"#endif // " + strDefine)

        return "\n".join(listDes)

    @classmethod
    def convert_cpp(cls, param):
        listDes = []
        strSepa = u": "
        csParam = Constructed(param.strClassBase)


        listDes.append(u"#include \"%s.h\" " % param.strClassName.lower())
        listDes.append(u"\n")

        if param.bImpl:
            listDes.append(u"class %s::Impl" % param.strClassName)
            listDes.append(u"{")
            listDes.append(u"public:")
            listDes.append(u"};")
            listDes.append(u"")

        listDes.append(u"%s::%s(%s)" % (param.strClassName, param.strClassName,  u", ".join(csParam.listParam)))

        if csParam.strClassName:
            listDes.append(strSepa + csParam.strClassName + u"(%s)" % u", ".join(csParam.listVal))
            strSepa = u", "

        if param.bImpl:
            listDes.append(strSepa + u"m_pImpl(new Impl)")

        listDes.append(u"{")
        listDes.append(u"}")
        listDes.append(u"")

        listDes.append(u"%s::~%s()" % (param.strClassName, param.strClassName))
        listDes.append(u"{")
        listDes.append(u"}")

        return "\n".join(listDes)
