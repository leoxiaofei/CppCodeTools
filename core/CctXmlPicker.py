"""Subclass of frmXmlPicker, which is generated by wxFormBuilder."""

from ui.CctUi import *

import xml.sax
from xml.sax.handler import *


class QuotationHandler(ContentHandler):
    """Crude extractor for quotations.dtd compliant XML document"""

    def __init__(self):
        self.listName = []
        self.listAttr = []

    def startDocument(self):
        print '--- Begin Document ---'

    def endDocument(self):
        print '--- End Document ---'

    def startElement(self, name, attrs):
        if name not in self.listName:
            self.listName.append(name)
        for key in attrs.keys():
            if key not in self.listAttr:
                self.listAttr.append(key)

    def endElement(self, name):
        pass


class XmlParam:
    def __init__(self):
        self.strXml = u""


# Implementing frmXmlPicker
class CCTXmlPicker(frmXmlPicker):
    def __init__(self, parent):
        frmXmlPicker.__init__(self, parent)

    # Handlers for frmXmlPicker events.
    def OnTextXml(self, event):
        self.update_dst()
        pass

    @classmethod
    def convert(cls, param):
        strRet = ""
        try:
            handler = QuotationHandler()
            xml.sax.parseString(param.strXml, handler)

            strRet += "enum ElemText { "
            for strName in handler.listName:
                strRet += "ET_%s, " % strName.upper()
            if strRet[-2:] == ", ":
                strRet = strRet[:-2]
            strRet += " };\n\n"

            strRet += "const char* szElemText[] = \n{\n"
            for strName in handler.listName:
                strRet += "\"%s\",\n" % strName
            strRet += " };\n\n"

            strRet += "enum AttrText { "
            for strAttr in handler.listAttr:
                strRet += "AT_%s, " % strAttr.upper()
            if strRet[-2:] == ", ":
                strRet = strRet[:-2]
            strRet += " };\n\n"

            strRet += "const char* szAttrText[] = \n{\n"
            for strAttr in handler.listAttr:
                strRet += "\"%s\",\n" % strAttr
            strRet += " };\n\n"

        except:
            import traceback
            traceback.print_exc()
        finally:
            pass

        return strRet

    def update_dst(self):
        param = XmlParam()
        param.strXml = self.edtXml.GetValue()
        strDst = self.convert(param)
        self.edtRes.SetValue(strDst)
